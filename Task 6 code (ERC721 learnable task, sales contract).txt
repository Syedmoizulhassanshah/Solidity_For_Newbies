// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.0;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol';
import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721.sol';

contract MoizERC721Token is ERC721 {
    
    address _contractOwner;
    
    constructor () ERC721 ("LEO_Coin","LC")
    {
        _mint(msg.sender,1);
       _contractOwner=msg.sender;
    }
    
    /// function to mint coins
     function mint(address to , uint tokenID) public {
        
           _safeMint(to,tokenID);
        
     }
    
         /// function to check the current  contract ether balance.         
function _checkContractEtherBalance() public view returns (uint256)
      {
          return address(this).balance; ///function that sends ether using "transfer" instead of sender as it shows exception
    
      }
}// end of the contract


contract Approved_Seller {
    
     
    MoizERC721Token ob;
    constructor(address _address){
        ob=MoizERC721Token(_address);
        
    }
    
    function mintTokens (uint256 _tokenID) external payable{
               
                ob.mint(msg.sender,_tokenID);
    }
    
    function transferTokenFromOwner (address to, uint _tokenID) payable external
    {     
            require(msg.value== 5 ether,"should be equal to 5.");
        
            address _OwnerOFToken = ob.ownerOf(_tokenID);
        ob.safeTransferFrom(_OwnerOFToken,to,_tokenID);
       payable (_OwnerOFToken).transfer(address(this).balance);
       
    }
    
    function checkBalanceofTokens(address checkaddress)  view external returns(uint256)
    {
       
       return ob.balanceOf(checkaddress);
        
    }
    
    function OwnerOFToken(uint256 tokenID) view external returns(address)
    {
        address _OwnerOFToken = ob.ownerOf(tokenID);
        return _OwnerOFToken;
    }
    
}//end of contract